--// 01/06/2021 \\--

-----------------------------------------------------

CREATE TABLE [dbo].[RegistrationCoachCertifications](
	[TeamId] [int] NOT NULL,
	[Certification] [int] NOT NULL,
 CONSTRAINT [PK_RegistrationCoachCertifications] PRIMARY KEY CLUSTERED
(
	[TeamId] ASC,
	[Certification] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RegistrationCoachCertifications]  WITH CHECK ADD  CONSTRAINT [FK_RegistrationCoachCertifications_Team] FOREIGN KEY([TeamId])
REFERENCES [dbo].[TeamRegistrations] ([Id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[RegistrationCoachCertifications] CHECK CONSTRAINT [FK_RegistrationCoachCertifications_Team]
GO

-----------------------------------------------------

CREATE FUNCTION [dbo].[GetCoachCertifications]
(
	@Team int
)
RETURNS nvarchar(50)
AS
BEGIN
	Declare @Certifications nvarchar(50);
	Declare @CurrentCertification int;

	Set @Certifications = '';

	DECLARE certification_cursor CURSOR FOR
	SELECT DISTINCT Certification
	FROM RegistrationCoachCertifications
	Where TeamId=@Team

	OPEN certification_cursor

	FETCH NEXT FROM certification_cursor
	INTO @CurrentCertification

	--update confirmation dates:
	WHILE @@FETCH_STATUS = 0
	BEGIN
		If Len(@Certifications)>0 Begin
			Set @Certifications = @Certifications + ',';
		End
		Set @Certifications = @Certifications + Convert(nvarchar(50), @CurrentCertification);

		--advance to next record:
		FETCH NEXT FROM certification_cursor
		INTO @CurrentCertification
	END

	CLOSE certification_cursor
	DEALLOCATE certification_cursor

	Return @Certifications;
END
GO

-----------------------------------------------------

ALTER TABLE TEAMS
ADD [DATE_CONFIRMED] [datetime] NULL
GO

-----------------------------------------------------

-- =======    TEAM_ADDED TRIGGER   ======
ALTER TRIGGER [dbo].[T_TEAM_ADDED]
ON [dbo].[TEAMS]
AFTER INSERT AS
BEGIN
	DECLARE @confirmedTeam int;
	DECLARE @school int;
	DECLARE @price float;
	DECLARE @team int;
	DECLARE @region int;
	DECLARE @city int;
	DECLARE @isClubsChamp int;
	DECLARE @schoolClubStatus int;
	DECLARE @regionSupervisor int;
	DECLARE @champcategory int;
	DECLARE @product int;

	-- =======    confirmed teams   ======
	DECLARE confirmed_teams_cursor CURSOR FOR
	SELECT DISTINCT ins.TEAM_ID
	FROM inserted ins
	Where [STATUS]=2

	OPEN confirmed_teams_cursor

	FETCH NEXT FROM confirmed_teams_cursor
	INTO @confirmedTeam

	--update confirmation dates:
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Update TEAMS
		Set DATE_CONFIRMED=GetDate()
		Where TEAM_ID=@confirmedTeam

		--advance to next record:
		FETCH NEXT FROM confirmed_teams_cursor
		INTO @confirmedTeam
	END

	CLOSE confirmed_teams_cursor
	DEALLOCATE confirmed_teams_cursor

	-- =======    add charge for the school, only if team is confirmed   ======
	DECLARE charge_cursor CURSOR FOR
	SELECT ins.TEAM_ID, ins.SCHOOL_ID, cc.REGISTRATION_PRICE, cc.CHAMPIONSHIP_CATEGORY_ID, c.IS_CLUBS, c.REGION_ID, sc.CITY_ID
	FROM inserted ins, CHAMPIONSHIP_CATEGORIES cc, CHAMPIONSHIPS c, SPORTS s, SCHOOLS sc
	WHERE ins.CHAMPIONSHIP_CATEGORY_ID=cc.CHAMPIONSHIP_CATEGORY_ID
	AND cc.CHAMPIONSHIP_ID=c.CHAMPIONSHIP_ID AND c.SPORT_ID=s.SPORT_ID
	AND ins.SCHOOL_ID=sc.SCHOOL_ID AND ins.STATUS=2

	OPEN charge_cursor
	FETCH NEXT FROM charge_cursor
	INTO @team, @school, @price, @champcategory, @isClubsChamp, @region, @city

	WHILE @@FETCH_STATUS = 0
	BEGIN
		--charge only if price is positive:
		IF @price>0
		BEGIN
			DECLARE @charge int
			IF @isClubsChamp=1 BEGIN
				SET @product = 5;
			END ELSE BEGIN
				IF @region=0 BEGIN
					SET @product = 1;
				END ELSE BEGIN
					SET @product = 7;
				END
			END
			EXEC SP_INSERT_SCHOOL_CHARGE @school, @product, @price, @champcategory, @charge OUTPUT

			UPDATE TEAMS
			SET CHARGE_ID = @charge
			WHERE TEAM_ID = @team
		END

		FETCH NEXT FROM charge_cursor
		INTO @team, @school, @price, @champcategory, @isClubsChamp, @region, @city
	END

	CLOSE charge_cursor
	DEALLOCATE charge_cursor
END
GO

-----------------------------------------------------

-- =======    TEAM_UPDATED TRIGGER   ======
ALTER TRIGGER [dbo].[T_TEAM_UPDATED]
ON [dbo].[TEAMS]
AFTER UPDATE AS
BEGIN
	DECLARE @charge_team int
	DECLARE @teamId int;
   	DECLARE @teamStatus int;
	DECLARE @charge int
	DECLARE @team int

    -- =======    teams with changed status   ======
	DECLARE changed_status_teams_cursor CURSOR FOR
	SELECT DISTINCT ins.TEAM_ID, ins.[STATUS]
	FROM deleted del, inserted ins
	WHERE (del.TEAM_ID=ins.TEAM_ID) AND (del.[STATUS]<>ins.[STATUS])

	OPEN changed_status_teams_cursor

	FETCH NEXT FROM changed_status_teams_cursor
	INTO @teamId, @teamStatus

	--update confirmation dates:
	WHILE @@FETCH_STATUS = 0
	BEGIN
		If @teamStatus=2 Begin
			Update TEAMS
			Set DATE_CONFIRMED=GetDate()
			Where TEAM_ID=@teamId
		End Else Begin
			Update TEAMS
			Set DATE_CONFIRMED=Null
			Where TEAM_ID=@teamId
		End

		--advance to next record:
		FETCH NEXT FROM changed_status_teams_cursor
		INTO @teamId, @teamStatus
	END

	CLOSE changed_status_teams_cursor
	DEALLOCATE changed_status_teams_cursor

	IF 	(SELECT COUNT(*) FROM deleted del, inserted ins
		 WHERE del.TEAM_ID=ins.TEAM_ID AND del.CHARGE_ID<>ins.CHARGE_ID)>0
	BEGIN
		RETURN
	END

	-- =======    delete charge if the team has been marked as deleted   ======
	DECLARE delete_charge_cursor CURSOR FOR
	SELECT ins.CHARGE_ID
	FROM deleted del, inserted ins
	WHERE (del.TEAM_ID=ins.TEAM_ID) AND (del.DATE_DELETED IS NULL)
	AND (ins.DATE_DELETED IS NOT NULL)

	OPEN delete_charge_cursor
	FETCH NEXT FROM delete_charge_cursor
	INTO @charge

	WHILE @@FETCH_STATUS = 0
	BEGIN
		--charge only if price is positive:
		UPDATE CHARGES SET DATE_DELETED=GETDATE()
		WHERE CHARGE_ID=@charge

		FETCH NEXT FROM delete_charge_cursor
		INTO @charge
	END

	DECLARE @status int
	DECLARE @user int
	DECLARE @school int --nvarchar(50)
	DECLARE @price float
	DECLARE @sport int --type of sport: 1 Competition 2 Match
	DECLARE @championship int
	DECLARE @region int
	DECLARE @city int
	DECLARE @userschool int
	DECLARE @isClubsChamp int
	DECLARE @champcategory int
	DECLARE @product int

	-- =======    add charge for the school, only if team is confirmed   ======
	DECLARE charge_cursor_2 CURSOR FOR
	SELECT ins.TEAM_ID, ins.SCHOOL_ID, s.SPORT_TYPE, cc.REGISTRATION_PRICE, c.CHAMPIONSHIP_ID, cc.CHAMPIONSHIP_CATEGORY_ID, c.IS_CLUBS, sc.REGION_ID, sc.CITY_ID
	FROM deleted del, inserted ins, CHAMPIONSHIP_CATEGORIES cc, CHAMPIONSHIPS c, SPORTS s, SCHOOLS sc
	WHERE del.TEAM_ID=ins.TEAM_ID AND del.STATUS<>ins.STATUS
	AND ins.CHAMPIONSHIP_CATEGORY_ID=cc.CHAMPIONSHIP_CATEGORY_ID
	AND cc.CHAMPIONSHIP_ID=c.CHAMPIONSHIP_ID AND c.SPORT_ID=s.SPORT_ID
	And ins.SCHOOL_ID=sc.SCHOOL_ID And ins.STATUS=2

	OPEN charge_cursor_2
	FETCH NEXT FROM charge_cursor_2
	INTO @team, @school, @sport, @price, @championship, @champcategory, @isClubsChamp, @region, @city

	WHILE @@FETCH_STATUS = 0
	BEGIN
		--charge only if price is positive:
		IF @price>0
		BEGIN
			DECLARE @newcharge int
			SET @product = 1;
			IF @isClubsChamp=1
				SET @product = 5;
			EXEC SP_INSERT_SCHOOL_CHARGE @school, @product, @price, @champcategory, @newcharge OUTPUT

			INSERT INTO TEMP_CHARGE_TEAMS (CHARGE_ID, TEAM_ID)
			VALUES(@newcharge, @team)

			UPDATE TEAMS
			SET CHARGE_ID = @newcharge
			WHERE TEAM_ID = @team
		END

		FETCH NEXT FROM charge_cursor_2
		INTO @team, @school, @sport, @price, @championship, @champcategory, @isClubsChamp, @region, @city
	END

	CLOSE charge_cursor_2
	DEALLOCATE charge_cursor_2

	CLOSE delete_charge_cursor
	DEALLOCATE delete_charge_cursor
END
GO

-----------------------------------------------------

ALTER TABLE [TeamRegistrations]
ADD [CoachSexOffenseClearance] [int] NULL
GO

-----------------------------------------------------